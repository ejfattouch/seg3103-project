# Generated by Grammarinator 23.7

import itertools

from math import inf
from grammarinator.runtime import *

class SecurityTestGrammarGenerator(Generator):


    def EOF(self, parent=None):
        pass
    EOF.min_depth = 0

    def malicious_login(self, parent=None):
        with RuleContext(self, UnparserRule(name='malicious_login', parent=parent)) as current:
            UnlexerRule(src='{', parent=current)
            self.email_field(parent=current)
            UnlexerRule(src=',', parent=current)
            self.password_field(parent=current)
            UnlexerRule(src='}', parent=current)
            return current
    malicious_login.min_depth = 3

    def email_field(self, parent=None):
        with RuleContext(self, UnparserRule(name='email_field', parent=parent)) as current:
            UnlexerRule(src='"email"', parent=current)
            UnlexerRule(src=':', parent=current)
            self.email_value(parent=current)
            return current
    email_field.min_depth = 2

    def password_field(self, parent=None):
        with RuleContext(self, UnparserRule(name='password_field', parent=parent)) as current:
            UnlexerRule(src='"password"', parent=current)
            UnlexerRule(src=':', parent=current)
            self.password_value(parent=current)
            return current
    password_field.min_depth = 2

    def email_value(self, parent=None):
        with RuleContext(self, UnparserRule(name='email_value', parent=parent)) as current:
            with AlternationContext(self, [2, 3, 2, 1], [1, 1, 1, 1]) as weights0:
                choice0 = self._model.choice(current, 0, weights0)
                [self.quoted_nosql_injection, self.quoted_buffer_overflow, self.quoted_normal_email, self.mongo_operator_injection][choice0](parent=current)
            return current
    email_value.min_depth = 1

    def password_value(self, parent=None):
        with RuleContext(self, UnparserRule(name='password_value', parent=parent)) as current:
            with AlternationContext(self, [2, 3, 3, 1], [1, 1, 1, 1]) as weights0:
                choice0 = self._model.choice(current, 0, weights0)
                [self.quoted_xss_attack, self.quoted_buffer_overflow, self.quoted_normal_password, self.mongo_operator_injection][choice0](parent=current)
            return current
    password_value.min_depth = 1

    def quoted_nosql_injection(self, parent=None):
        with RuleContext(self, UnparserRule(name='quoted_nosql_injection', parent=parent)) as current:
            UnlexerRule(src='"', parent=current)
            self.nosql_injection(parent=current)
            UnlexerRule(src='"', parent=current)
            return current
    quoted_nosql_injection.min_depth = 1

    def quoted_buffer_overflow(self, parent=None):
        with RuleContext(self, UnparserRule(name='quoted_buffer_overflow', parent=parent)) as current:
            UnlexerRule(src='"', parent=current)
            self.buffer_overflow(parent=current)
            UnlexerRule(src='"', parent=current)
            return current
    quoted_buffer_overflow.min_depth = 2

    def quoted_normal_email(self, parent=None):
        with RuleContext(self, UnparserRule(name='quoted_normal_email', parent=parent)) as current:
            UnlexerRule(src='"', parent=current)
            self.normal_email(parent=current)
            UnlexerRule(src='"', parent=current)
            return current
    quoted_normal_email.min_depth = 1

    def quoted_xss_attack(self, parent=None):
        with RuleContext(self, UnparserRule(name='quoted_xss_attack', parent=parent)) as current:
            UnlexerRule(src='"', parent=current)
            self.xss_attack(parent=current)
            UnlexerRule(src='"', parent=current)
            return current
    quoted_xss_attack.min_depth = 1

    def quoted_normal_password(self, parent=None):
        with RuleContext(self, UnparserRule(name='quoted_normal_password', parent=parent)) as current:
            UnlexerRule(src='"', parent=current)
            self.normal_password(parent=current)
            UnlexerRule(src='"', parent=current)
            return current
    quoted_normal_password.min_depth = 2

    def nosql_injection(self, parent=None):
        with RuleContext(self, UnparserRule(name='nosql_injection', parent=parent)) as current:
            with AlternationContext(self, [0, 0, 0, 0, 0], [1, 1, 1, 1, 1]) as weights0:
                choice0 = self._model.choice(current, 0, weights0)
                UnlexerRule(src=['{$ne": null}', '{$gt": ""}', '{$regex": ".*"}', '{$where": "1==1"}', '{$exists": true}'][choice0], parent=current)
            return current
    nosql_injection.min_depth = 0

    def mongo_operator_injection(self, parent=None):
        with RuleContext(self, UnparserRule(name='mongo_operator_injection', parent=parent)) as current:
            with AlternationContext(self, [0, 0, 0, 0, 0], [1, 1, 1, 1, 1]) as weights0:
                choice0 = self._model.choice(current, 0, weights0)
                UnlexerRule(src=['{$ne": "wrong"}', '{$gt": ""}', '{$lt": "zzzz"}', '{$regex": "^.*"}', '{$in": ["admin", "user"]}'][choice0], parent=current)
            return current
    mongo_operator_injection.min_depth = 0

    def xss_attack(self, parent=None):
        with RuleContext(self, UnparserRule(name='xss_attack', parent=parent)) as current:
            with AlternationContext(self, [0, 0, 0, 0], [1, 1, 1, 1]) as weights0:
                choice0 = self._model.choice(current, 0, weights0)
                UnlexerRule(src=['<script>', 'javascript:', '<img src=x onerror=', '&lt;script&gt;'][choice0], parent=current)
            return current
    xss_attack.min_depth = 0

    def buffer_overflow(self, parent=None):
        with RuleContext(self, UnparserRule(name='buffer_overflow', parent=parent)) as current:
            with AlternationContext(self, [1, 1, 1], [1, 1, 1]) as weights0:
                choice0 = self._model.choice(current, 0, weights0)
                if choice0 == 0:
                    self.CHUNK(parent=current)
                    self.CHUNK(parent=current)
                    self.CHUNK(parent=current)
                    self.CHUNK(parent=current)
                    self.CHUNK(parent=current)
                elif choice0 == 1:
                    self.CHUNK(parent=current)
                    self.CHUNK(parent=current)
                    self.CHUNK(parent=current)
                    self.CHUNK(parent=current)
                    self.CHUNK(parent=current)
                    self.CHUNK(parent=current)
                elif choice0 == 2:
                    self.CHUNK(parent=current)
                    self.CHUNK(parent=current)
                    self.CHUNK(parent=current)
                    self.CHUNK(parent=current)
                    self.CHUNK(parent=current)
                    self.CHUNK(parent=current)
                    self.CHUNK(parent=current)
                    self.CHUNK(parent=current)
                    self.CHUNK(parent=current)
                    self.CHUNK(parent=current)
            return current
    buffer_overflow.min_depth = 1

    def CHUNK(self, parent=None):
        with RuleContext(self, UnlexerRule(name='CHUNK', parent=parent)) as current:
            UnlexerRule(src=self._model.charset(current, 0, self._charsets[1]), parent=current)
            return current
    CHUNK.min_depth = 0

    def normal_email(self, parent=None):
        with RuleContext(self, UnparserRule(name='normal_email', parent=parent)) as current:
            pass
            return current
    normal_email.min_depth = 0

    def PASS_CHAR(self, parent=None):
        with RuleContext(self, UnlexerRule(name='PASS_CHAR', parent=parent)) as current:
            UnlexerRule(src=self._model.charset(current, 0, self._charsets[2]), parent=current)
            return current
    PASS_CHAR.min_depth = 0

    def normal_password(self, parent=None):
        with RuleContext(self, UnparserRule(name='normal_password', parent=parent)) as current:
            self.PASS_CHAR(parent=current)
            self.PASS_CHAR(parent=current)
            self.PASS_CHAR(parent=current)
            self.PASS_CHAR(parent=current)
            self.PASS_CHAR(parent=current)
            self.PASS_CHAR(parent=current)
            self.PASS_CHAR(parent=current)
            self.PASS_CHAR(parent=current)
            if self._max_depth >= 1:
                for _ in self._model.quantify(current, 0, min=0, max=inf):
                    self.PASS_CHAR(parent=current)
            return current
    normal_password.min_depth = 1

    def WS(self, parent=None):
        with RuleContext(self, UnlexerRule(name='WS', parent=parent)) as current:
            if self._max_depth >= 0:
                for _ in self._model.quantify(current, 0, min=1, max=inf):
                    UnlexerRule(src=self._model.charset(current, 0, self._charsets[3]), parent=current)
            return current
    WS.min_depth = 0

    _default_rule = malicious_login

    _charsets = {
        0: list(itertools.chain.from_iterable([range(32, 127)])),
        1: list(itertools.chain.from_iterable([range(48, 58), range(65, 91), range(97, 123)])),
        2: list(itertools.chain.from_iterable([range(33, 34), range(35, 36), range(36, 37), range(37, 38), range(38, 39), range(40, 41), range(41, 42), range(42, 43), range(43, 44), range(45, 46), range(48, 58), range(61, 62), range(64, 65), range(65, 91), range(94, 95), range(95, 96), range(97, 123)])),
        3: list(itertools.chain.from_iterable([range(9, 10), range(10, 11), range(13, 14), range(32, 33)])),
    }
