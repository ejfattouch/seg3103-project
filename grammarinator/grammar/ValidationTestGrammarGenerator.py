# Generated by Grammarinator 23.7

import itertools

from math import inf
from grammarinator.runtime import *

class ValidationTestGrammarGenerator(Generator):


    def EOF(self, parent=None):
        pass
    EOF.min_depth = 0

    def login_test(self, parent=None):
        with RuleContext(self, UnparserRule(name='login_test', parent=parent)) as current:
            with AlternationContext(self, [5, 5, 5], [1, 1, 1]) as weights0:
                choice0 = self._model.choice(current, 0, weights0)
                [self.valid_login, self.edge_login, self.invalid_login][choice0](parent=current)
            return current
    login_test.min_depth = 5

    def valid_login(self, parent=None):
        with RuleContext(self, UnparserRule(name='valid_login', parent=parent)) as current:
            UnlexerRule(src='{', parent=current)
            UnlexerRule(src='"email"', parent=current)
            UnlexerRule(src=':', parent=current)
            self.quoted_VALID_EMAIL(parent=current)
            UnlexerRule(src=',', parent=current)
            UnlexerRule(src='"password"', parent=current)
            UnlexerRule(src=':', parent=current)
            self.quoted_VALID_PASSWORD(parent=current)
            UnlexerRule(src='}', parent=current)
            return current
    valid_login.min_depth = 4

    def edge_login(self, parent=None):
        with RuleContext(self, UnparserRule(name='edge_login', parent=parent)) as current:
            UnlexerRule(src='{', parent=current)
            UnlexerRule(src='"email"', parent=current)
            UnlexerRule(src=':', parent=current)
            self.quoted_EDGE_EMAIL(parent=current)
            UnlexerRule(src=',', parent=current)
            UnlexerRule(src='"password"', parent=current)
            UnlexerRule(src=':', parent=current)
            self.quoted_EDGE_PASSWORD(parent=current)
            UnlexerRule(src='}', parent=current)
            return current
    edge_login.min_depth = 4

    def invalid_login(self, parent=None):
        with RuleContext(self, UnparserRule(name='invalid_login', parent=parent)) as current:
            UnlexerRule(src='{', parent=current)
            UnlexerRule(src='"email"', parent=current)
            UnlexerRule(src=':', parent=current)
            self.quoted_INVALID_EMAIL(parent=current)
            UnlexerRule(src=',', parent=current)
            UnlexerRule(src='"password"', parent=current)
            UnlexerRule(src=':', parent=current)
            self.quoted_INVALID_PASSWORD(parent=current)
            UnlexerRule(src='}', parent=current)
            return current
    invalid_login.min_depth = 4

    def quoted_VALID_EMAIL(self, parent=None):
        with RuleContext(self, UnparserRule(name='quoted_VALID_EMAIL', parent=parent)) as current:
            UnlexerRule(src='"', parent=current)
            self.VALID_EMAIL(parent=current)
            UnlexerRule(src='"', parent=current)
            return current
    quoted_VALID_EMAIL.min_depth = 3

    def quoted_VALID_PASSWORD(self, parent=None):
        with RuleContext(self, UnparserRule(name='quoted_VALID_PASSWORD', parent=parent)) as current:
            UnlexerRule(src='"', parent=current)
            self.VALID_PASSWORD(parent=current)
            UnlexerRule(src='"', parent=current)
            return current
    quoted_VALID_PASSWORD.min_depth = 2

    def quoted_EDGE_EMAIL(self, parent=None):
        with RuleContext(self, UnparserRule(name='quoted_EDGE_EMAIL', parent=parent)) as current:
            UnlexerRule(src='"', parent=current)
            self.EDGE_EMAIL(parent=current)
            UnlexerRule(src='"', parent=current)
            return current
    quoted_EDGE_EMAIL.min_depth = 3

    def quoted_EDGE_PASSWORD(self, parent=None):
        with RuleContext(self, UnparserRule(name='quoted_EDGE_PASSWORD', parent=parent)) as current:
            UnlexerRule(src='"', parent=current)
            self.EDGE_PASSWORD(parent=current)
            UnlexerRule(src='"', parent=current)
            return current
    quoted_EDGE_PASSWORD.min_depth = 2

    def quoted_INVALID_EMAIL(self, parent=None):
        with RuleContext(self, UnparserRule(name='quoted_INVALID_EMAIL', parent=parent)) as current:
            UnlexerRule(src='"', parent=current)
            self.INVALID_EMAIL(parent=current)
            UnlexerRule(src='"', parent=current)
            return current
    quoted_INVALID_EMAIL.min_depth = 3

    def quoted_INVALID_PASSWORD(self, parent=None):
        with RuleContext(self, UnparserRule(name='quoted_INVALID_PASSWORD', parent=parent)) as current:
            UnlexerRule(src='"', parent=current)
            self.INVALID_PASSWORD(parent=current)
            UnlexerRule(src='"', parent=current)
            return current
    quoted_INVALID_PASSWORD.min_depth = 2

    def VALID_EMAIL(self, parent=None):
        with RuleContext(self, UnlexerRule(name='VALID_EMAIL', parent=parent)) as current:
            self.EMAIL_LOCAL_PART(parent=current)
            UnlexerRule(src='@', parent=current)
            self.EMAIL_DOMAIN(parent=current)
            UnlexerRule(src='.', parent=current)
            self.EMAIL_TLD(parent=current)
            return current
    VALID_EMAIL.min_depth = 2

    def VALID_PASSWORD(self, parent=None):
        with RuleContext(self, UnlexerRule(name='VALID_PASSWORD', parent=parent)) as current:
            if self._max_depth >= 0:
                for _ in self._model.quantify(current, 0, min=1, max=inf):
                    self.PASSWORD_CHAR(parent=current)
            return current
    VALID_PASSWORD.min_depth = 1

    def EDGE_EMAIL(self, parent=None):
        with RuleContext(self, UnlexerRule(name='EDGE_EMAIL', parent=parent)) as current:
            self.EDGE_EMAIL_LOCAL(parent=current)
            UnlexerRule(src='@', parent=current)
            self.EDGE_EMAIL_DOMAIN(parent=current)
            UnlexerRule(src='.', parent=current)
            self.EDGE_EMAIL_TLD(parent=current)
            return current
    EDGE_EMAIL.min_depth = 2

    def EDGE_PASSWORD(self, parent=None):
        with RuleContext(self, UnlexerRule(name='EDGE_PASSWORD', parent=parent)) as current:
            with AlternationContext(self, [1, 1], [1, 1]) as weights0:
                choice0 = self._model.choice(current, 0, weights0)
                [self.PASSWORD_CHAR, self.PASSWORD_CHAR][choice0](parent=current)
            return current
    EDGE_PASSWORD.min_depth = 1

    def INVALID_EMAIL(self, parent=None):
        with RuleContext(self, UnlexerRule(name='INVALID_EMAIL', parent=parent)) as current:
            with AlternationContext(self, [2, 2], [1, 1]) as weights0:
                choice0 = self._model.choice(current, 0, weights0)
                [self.SHORT_STRING, self.MISSING_AT_OR_DOMAIN][choice0](parent=current)
            return current
    INVALID_EMAIL.min_depth = 2

    def INVALID_PASSWORD(self, parent=None):
        with RuleContext(self, UnlexerRule(name='INVALID_PASSWORD', parent=parent)) as current:
            self.PASSWORD_CHAR(parent=current)
            return current
    INVALID_PASSWORD.min_depth = 1

    def EMAIL_LOCAL_PART(self, parent=None):
        with RuleContext(self, UnlexerRule(name='EMAIL_LOCAL_PART', parent=parent)) as current:
            self.EMAIL_CHAR(parent=current)
            return current
    EMAIL_LOCAL_PART.min_depth = 1

    def EMAIL_DOMAIN(self, parent=None):
        with RuleContext(self, UnlexerRule(name='EMAIL_DOMAIN', parent=parent)) as current:
            self.EMAIL_CHAR(parent=current)
            return current
    EMAIL_DOMAIN.min_depth = 1

    def EMAIL_TLD(self, parent=None):
        with RuleContext(self, UnlexerRule(name='EMAIL_TLD', parent=parent)) as current:
            UnlexerRule(src=self._model.charset(current, 0, self._charsets[1]), parent=current)
            return current
    EMAIL_TLD.min_depth = 0

    def EDGE_EMAIL_LOCAL(self, parent=None):
        with RuleContext(self, UnlexerRule(name='EDGE_EMAIL_LOCAL', parent=parent)) as current:
            self.EMAIL_CHAR(parent=current)
            return current
    EDGE_EMAIL_LOCAL.min_depth = 1

    def EDGE_EMAIL_DOMAIN(self, parent=None):
        with RuleContext(self, UnlexerRule(name='EDGE_EMAIL_DOMAIN', parent=parent)) as current:
            self.EMAIL_CHAR(parent=current)
            return current
    EDGE_EMAIL_DOMAIN.min_depth = 1

    def EDGE_EMAIL_TLD(self, parent=None):
        with RuleContext(self, UnlexerRule(name='EDGE_EMAIL_TLD', parent=parent)) as current:
            UnlexerRule(src=self._model.charset(current, 0, self._charsets[2]), parent=current)
            return current
    EDGE_EMAIL_TLD.min_depth = 0

    def SHORT_STRING(self, parent=None):
        with RuleContext(self, UnlexerRule(name='SHORT_STRING', parent=parent)) as current:
            self.EMAIL_CHAR(parent=current)
            return current
    SHORT_STRING.min_depth = 1

    def MISSING_AT_OR_DOMAIN(self, parent=None):
        with RuleContext(self, UnlexerRule(name='MISSING_AT_OR_DOMAIN', parent=parent)) as current:
            self.EMAIL_CHAR(parent=current)
            return current
    MISSING_AT_OR_DOMAIN.min_depth = 1

    def EMAIL_CHAR(self, parent=None):
        with RuleContext(self, UnlexerRule(name='EMAIL_CHAR', parent=parent)) as current:
            UnlexerRule(src=self._model.charset(current, 0, self._charsets[3]), parent=current)
            return current
    EMAIL_CHAR.min_depth = 0

    def PASSWORD_CHAR(self, parent=None):
        with RuleContext(self, UnlexerRule(name='PASSWORD_CHAR', parent=parent)) as current:
            UnlexerRule(src=self._model.charset(current, 0, self._charsets[4]), parent=current)
            return current
    PASSWORD_CHAR.min_depth = 0

    def WS(self, parent=None):
        with RuleContext(self, UnlexerRule(name='WS', parent=parent)) as current:
            if self._max_depth >= 0:
                for _ in self._model.quantify(current, 0, min=1, max=inf):
                    UnlexerRule(src=self._model.charset(current, 0, self._charsets[5]), parent=current)
            return current
    WS.min_depth = 0

    _default_rule = login_test

    _charsets = {
        0: list(itertools.chain.from_iterable([range(32, 127)])),
        1: list(itertools.chain.from_iterable([range(65, 91), range(97, 123)])),
        2: list(itertools.chain.from_iterable([range(65, 91), range(97, 123)])),
        3: list(itertools.chain.from_iterable([range(43, 44), range(45, 46), range(46, 47), range(48, 58), range(65, 91), range(95, 96), range(97, 123)])),
        4: list(itertools.chain.from_iterable([range(33, 34), range(35, 36), range(36, 37), range(37, 38), range(38, 39), range(40, 41), range(41, 42), range(42, 43), range(43, 44), range(45, 46), range(48, 58), range(61, 62), range(64, 65), range(65, 91), range(94, 95), range(95, 96), range(97, 123)])),
        5: list(itertools.chain.from_iterable([range(9, 10), range(10, 11), range(13, 14), range(32, 33)])),
    }
