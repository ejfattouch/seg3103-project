# Generated by Grammarinator 23.7

import itertools

from math import inf
from grammarinator.runtime import *

class LoginJSONGenerator(Generator):


    def EOF(self, parent=None):
        pass
    EOF.min_depth = 0

    def json(self, parent=None):
        with RuleContext(self, UnparserRule(name='json', parent=parent)) as current:
            UnlexerRule(src='{', parent=current)
            self.email(parent=current)
            UnlexerRule(src=',', parent=current)
            self.password(parent=current)
            UnlexerRule(src='}', parent=current)
            return current
    json.min_depth = 3

    def email(self, parent=None):
        with RuleContext(self, UnparserRule(name='email', parent=parent)) as current:
            UnlexerRule(src='"email"', parent=current)
            UnlexerRule(src=':', parent=current)
            UnlexerRule(src='"', parent=current)
            self.EMAIL_STRING(parent=current)
            UnlexerRule(src='"', parent=current)
            return current
    email.min_depth = 1

    def password(self, parent=None):
        with RuleContext(self, UnparserRule(name='password', parent=parent)) as current:
            UnlexerRule(src='"password"', parent=current)
            UnlexerRule(src=':', parent=current)
            UnlexerRule(src='"', parent=current)
            self.password_chars(parent=current)
            UnlexerRule(src='"', parent=current)
            return current
    password.min_depth = 2

    def EMAIL_STRING(self, parent=None):
        with RuleContext(self, UnlexerRule(name='EMAIL_STRING', parent=parent)) as current:
            if self._max_depth >= 0:
                for _ in self._model.quantify(current, 0, min=1, max=inf):
                    UnlexerRule(src=self._model.charset(current, 0, self._charsets[1]), parent=current)
            UnlexerRule(src='@', parent=current)
            if self._max_depth >= 0:
                for _ in self._model.quantify(current, 1, min=1, max=inf):
                    UnlexerRule(src=self._model.charset(current, 1, self._charsets[2]), parent=current)
            UnlexerRule(src='.', parent=current)
            if self._max_depth >= 0:
                for _ in self._model.quantify(current, 2, min=1, max=inf):
                    UnlexerRule(src=self._model.charset(current, 2, self._charsets[3]), parent=current)
            return current
    EMAIL_STRING.min_depth = 0

    def PASS_CHAR(self, parent=None):
        with RuleContext(self, UnlexerRule(name='PASS_CHAR', parent=parent)) as current:
            UnlexerRule(src=self._model.charset(current, 0, self._charsets[4]), parent=current)
            return current
    PASS_CHAR.min_depth = 0

    def password_chars(self, parent=None):
        with RuleContext(self, UnparserRule(name='password_chars', parent=parent)) as current:
            self.PASS_CHAR(parent=current)
            self.PASS_CHAR(parent=current)
            self.PASS_CHAR(parent=current)
            self.PASS_CHAR(parent=current)
            self.PASS_CHAR(parent=current)
            self.PASS_CHAR(parent=current)
            self.PASS_CHAR(parent=current)
            self.PASS_CHAR(parent=current)
            if self._max_depth >= 1:
                for _ in self._model.quantify(current, 0, min=0, max=inf):
                    self.PASS_CHAR(parent=current)
            return current
    password_chars.min_depth = 1

    def WS(self, parent=None):
        with RuleContext(self, UnlexerRule(name='WS', parent=parent)) as current:
            if self._max_depth >= 0:
                for _ in self._model.quantify(current, 0, min=1, max=inf):
                    UnlexerRule(src=self._model.charset(current, 0, self._charsets[5]), parent=current)
            return current
    WS.min_depth = 0

    _default_rule = json

    _charsets = {
        0: list(itertools.chain.from_iterable([range(32, 127)])),
        1: list(itertools.chain.from_iterable([range(43, 44), range(45, 46), range(46, 47), range(48, 58), range(65, 91), range(95, 96), range(97, 123)])),
        2: list(itertools.chain.from_iterable([range(45, 46), range(46, 47), range(48, 58), range(65, 91), range(97, 123)])),
        3: list(itertools.chain.from_iterable([range(65, 91), range(97, 123)])),
        4: list(itertools.chain.from_iterable([range(33, 34), range(35, 36), range(36, 37), range(37, 38), range(38, 39), range(40, 41), range(41, 42), range(42, 43), range(43, 44), range(45, 46), range(48, 58), range(61, 62), range(64, 65), range(65, 91), range(94, 95), range(95, 96), range(97, 123)])),
        5: list(itertools.chain.from_iterable([range(9, 10), range(10, 11), range(13, 14), range(32, 33)])),
    }
